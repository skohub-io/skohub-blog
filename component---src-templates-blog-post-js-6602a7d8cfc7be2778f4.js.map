{"version":3,"file":"component---src-templates-blog-post-js-6602a7d8cfc7be2778f4.js","mappings":"uIA+CA,IArCY,KAAO,IAAD,IAChB,MAAMA,GAAOC,EAAAA,EAAAA,gBAAe,cAkBtBC,EAA+B,QAAzB,EAAGF,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBF,OACjCG,EAAoC,QAAzB,EAAGL,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBC,YAE5C,OACE,uBAAMC,UAAU,QACbJ,aAAM,EAANA,EAAQK,OACR,2BACC,yBACGF,EAAW,IACP,8BACsB,8BAASH,EAAOK,MAAc,MAIzD,C,oFCsCV,UA1EyB,IAAyB,IAAD,QAAvB,KAAEP,EAAI,SAAEQ,GAAU,EAC1C,MAAMC,EAAOT,EAAKU,eACZC,GAAkC,QAAtB,EAAAX,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBQ,QAAK,SACzC,SAAEC,EAAQ,KAAEC,GAASd,EAE3B,OACE,gBAAC,IAAM,CAACQ,SAAUA,EAAUI,MAAOD,GACjC,gBAAC,IAAG,CACFC,MAAOH,EAAKM,YAAYH,MACxBP,YAAaI,EAAKM,YAAYV,aAAeI,EAAKO,UAEpD,2BACEV,UAAU,YACVW,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYV,EAAKM,YAAYH,OAC1C,yBACGH,EAAKM,YAAYK,MACD,QAAhB,EAAAX,EAAKM,mBAAW,aAAhB,EAAkBM,UACX,kCAEGZ,EAAKM,YAAYM,QAAQC,KAAI,CAACpB,EAAQqB,IAEnC,wBAAMC,IAAK,SAAWD,GACnBrB,EAAOuB,UAAS,IAEhBvB,EAAOwB,SACPH,EAAQd,EAAKM,YAAYM,QAAQM,OAAS,EAAI,KAAY,SAM/E,2BACEC,wBAAyB,CAAEC,OAAQpB,EAAKqB,MACxCX,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAG,QAGR,uBAAKb,UAAU,iBACb,sBACEyB,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGvB,GACC,gBAAC,EAAAwB,KAAI,CAACC,GAAIzB,EAAS0B,OAAOC,KAAMC,IAAI,QAAO,KACtC5B,EAASE,YAAYH,QAI9B,0BACGE,GACC,gBAAC,EAAAuB,KAAI,CAACC,GAAIxB,EAAKyB,OAAOC,KAAMC,IAAI,QAC7B3B,EAAKC,YAAYH,MAAM,SAM3B,C","sources":["webpack://skohub-blog/./src/components/bio.js","webpack://skohub-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n          }\n          social {\n            mastodon\n            github\n          }\n          description\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const description = data.site.siteMetadata?.description\n\n  return (\n    <div  className=\"bio\">\n      {author?.name && (\n       <div>\n        <p>\n          {description}\n          {` `}\n          This blog is maintained by <strong>{author.name}</strong>.\n        </p>\n       </div>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>\n            {post.frontmatter.date}\n            {post.frontmatter?.authors && (\n                    <span>\n                      {` | `}\n                      {post.frontmatter.authors.map((author, index) => {\n                        return(\n                          <span key={\"author\" + index}>\n                            {author.firstname}\n                            {` `}\n                            {author.lastname}\n                            {index < post.frontmatter.authors.length - 1 ? ',\\u00A0' : ''}\n                          </span>\n                        )})}\n                    </span>)}\n          </p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        authors { \n          lastname\n          firstname\n         }\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","description","className","name","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","excerpt","itemScope","itemType","itemProp","date","authors","map","index","key","firstname","lastname","length","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}