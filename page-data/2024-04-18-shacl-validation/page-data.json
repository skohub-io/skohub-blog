{"componentChunkName":"component---src-templates-blog-post-js","path":"/2024-04-18-shacl-validation/","result":{"data":{"site":{"siteMetadata":{"title":"Skohub Blog"}},"markdownRemark":{"id":"45ba98b2-1c96-591b-8469-ca63a0451812","excerpt":"How to add automatic SHACL validation to your vocabs If you are using SkoHub to publish your vocabularies, we want to show you an easy solution to add some…","html":"<h2>How to add automatic SHACL validation to your vocabs</h2>\n<p>If you are using SkoHub to publish your vocabularies, we want to show you an easy solution to add some validation to your vocabulary repository to ensure the quality of your vocabularies.\nYou can also use this approach, if you are not using SkoHub, but still want to ensure some basic constraints that we set up in the <a href=\"https://github.com/skohub-io/shapes/blob/main/skohub.shacl.ttl\"><code class=\"language-text\">skohub.shacl.ttl</code></a> shape, e.g. that every <code class=\"language-text\">skos:Concept</code> should have at least one <code class=\"language-text\">skos:prefLabel</code> (which is not required by the SKOS Reference).</p>\n<p>Feel free to study the shape file. The <code class=\"language-text\">sh:message</code>s should give you a good explanation of what is tested with this shape. The <code class=\"language-text\">sh:severity</code> attribute shows you if the contraint will give a warning or a violation.</p>\n<p>The automatic validation step can easily be set up with the SkoHub SHACL shape in the <a href=\"https://github.com/skohub-io/shapes\">SkoHub Shapes repository</a>.\nAll you have to do is adding the <a href=\"https://github.com/skohub-io/shapes/?tab=readme-ov-file#add-validation-in-a-vocabulary-repository\">following GitHub Action config</a> to your vocabularies.\nIn the <code class=\"language-text\">.github/workflows/main.yaml</code> file, add the following steps:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Validate TTL Files\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>push<span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">check-for-warnings</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Check for Warnings\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout repository\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Check for Warnings\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        curl -s https://raw.githubusercontent.com/skohub-io/shapes/main/scripts/checkForWarning.rq >> checkForWarning.rq\n        find . -type f -name '*.ttl' | while read file; do\n          # Adjust the file path to remove the './' part\n          adjusted_file_path=$(echo \"$file\" | sed 's|^./||')\n          echo \"Processing $adjusted_file_path with Docker...\"\n          docker run --rm -v \"$(pwd)/$adjusted_file_path:/rdf/test.ttl\" skohub/jena:4.6.1 shacl validate --shapes https://raw.githubusercontent.com/skohub-io/shapes/main/skohub.shacl.ttl --data /rdf/test.ttl >> result.ttl\n          validation_result=\"$(docker run --rm --mount type=bind,source=./checkForWarning.rq,target=/rdf/checkForViolation.rq --mount type=bind,source=./result.ttl,target=/rdf/result.ttl skohub/jena:4.6.1 arq --data /rdf/result.ttl --query /rdf/checkForViolation.rq)\"\n          echo $validation_result\n          lines=$(echo \"$validation_result\" | wc -l )\n          # Correct validation has 4 lines of output\n          [[ ${lines} -eq 4 ]] || exit 1\n        done</span>\n\n  <span class=\"token key atrule\">check-for-errors</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Check for Errors\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout repository\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Check for Errors\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        curl -s https://raw.githubusercontent.com/skohub-io/shapes/main/scripts/checkForViolation.rq >> checkForViolation.rq\n        find . -type f -name '*.ttl' | while read file; do\n          # Adjust the file path to remove the './' part\n          adjusted_file_path=$(echo \"$file\" | sed 's|^./||')\n          echo \"Processing $adjusted_file_path with Docker...\"\n          docker run --rm -v \"$(pwd)/$adjusted_file_path:/rdf/test.ttl\" skohub/jena:4.6.1 shacl validate --shapes https://raw.githubusercontent.com/skohub-io/shapes/main/skohub.shacl.ttl --data /rdf/test.ttl >> result.ttl\n          validation_result=\"$(docker run --rm --mount type=bind,source=./checkForViolation.rq,target=/rdf/checkForViolation.rq --mount type=bind,source=./result.ttl,target=/rdf/result.ttl skohub/jena:4.6.1 arq --data /rdf/result.ttl --query /rdf/checkForViolation.rq)\"\n          echo $validation_result\n          lines=$(echo \"$validation_result\" | wc -l )\n          # Correct validation has 4 lines of output\n          [[ ${lines} -eq 4 ]] || exit 1\n        done</span></code></pre></div>\n<p>This will activate checks for violations and warnings of the <a href=\"https://github.com/skohub-io/shapes/blob/main/skohub.shacl.ttl\">SkoHub SHACL Shape</a>.\nThese checks will also automatically run in the context of a merge request.\nUnfortunatley you will also get a <em>red</em> error message for warnings, e.g. if you have no license provided in your vocabulary.\nThis is due to the fact that Actions either complete or fail and we have no way to indicate a “warning” message.</p>\n<h2>What about other code repositories?</h2>\n<p>The mentioned approach should be applicable to every code repository supporting CI pipelines.\nThe check might have to be adjusted a bit, but the main part should be easy to copy.\nIf you have a requirement for a specific code repository and  need support or have developed something you want to share, feel free to reach out at the <a href=\"https://metadaten.community/c/software-und-tools/skohub/9\">metadaten.community</a> forum or open an <a href=\"https://github.com/skohub-io/shapes/issues\">issue</a>.</p>","frontmatter":{"title":"Automatic SHACL validation for SKOS vocabs","date":"April 18, 2024","authors":[{"lastname":"Rörtgen","firstname":"Steffen"},{"lastname":"Pohl","firstname":"Adrian"}],"description":null}},"previous":{"fields":{"slug":"/2024-03-21-skohub-pages/"},"frontmatter":{"title":"Publishing SKOS the easy way"}},"next":null},"pageContext":{"id":"45ba98b2-1c96-591b-8469-ca63a0451812","previousPostId":"3686d7d6-2bd1-5708-93b9-f9dbe02db287","nextPostId":null}},"staticQueryHashes":["1878297489","2734362168","3000541721"],"slicesMap":{}}